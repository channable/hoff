---
version: "v1.0"
name: "Hoff"

agent:
  machine:
    type: "f1-standard-2"
    os_image: "ubuntu2204"

# If we push a new build to some branch that isn't master, and another build is
# already running, we cancel it.
auto_cancel:
  running:
    when: "branch != 'master'"

blocks:
  - name: "Build"
    task:
      secrets:
        - name: "opsbot-github-key"
        # Keys needed to access our cachix cache.
        - name: "cachix-channable-public"

      jobs:
        - name: "Build, test, package, ship"
          commands:
            # Change permissions of the shipping key to avoid SSH complaining
            # about the default file permissions that Semaphore uses.
            - "chmod 0600 ~/.ssh/id_ed25519"
            - "ssh-add ~/.ssh/id_ed25519"

            # With `--use-cache` we get a full clone that is cached by semaphore so that fetching is faster.
            - checkout --use-cache
            - .semaphore/prologue.sh
            - source $HOME/.nix-profile/etc/profile.d/nix.sh

            # Make the dev environment available for all subsequent commands, to
            # prevent having to run `nix develop` every time.
            - source "$HOME/devenv"

            # Binaries in the profile built above may need locales, that they
            # can't find unless we point LOCALE_ARCHIVE at the archive that
            # contains them.
            - "export LOCALE_ARCHIVE=$(nix-build --no-out-link locale.nix)/lib/locale/locale-archive"

            # Check the style of the hoff.cabal file
            - "cabal-fmt --check hoff.cabal"

            # Check the style of Haskell files
            - "fourmolu --mode check ."

            # This makes sure the version bounds from the `cabal.project.freeze`
            # file match the versions from nixpkgs. It also builds the project
            # for weeder to check.
            - "cabal build all"

            # This prevents dead functions from remaining in the code base.
            - "weeder"

            # Check shell scripts for issues.
            - "shellcheck package/*.sh package/deb-postinst"

            # Print working directory for debugging purposes
            - "pwd"

            # Check version consistency between hoff.cabal and hoff.nix
            - "./package/check-version.sh"

            # Run build and tests in Nix
            - "nix-build --no-out-link release.nix >nix-store-location"

            # Display Nix store location for debugging purposes
            - "cat nix-store-location"

            # push the result to Cachix.
            - "cat nix-store-location | cachix push channable-public"

            # Remove store location (unneeded now)
            - "rm nix-store-location"

            # Store a copy of the nix store. This will be refreshed daily, which
            # is more than sufficient for this repo.
            - "cache store nix-store-$(date -u -Idate) /nix"
