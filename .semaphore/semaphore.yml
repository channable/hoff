---
version: "v1.0"
name: "Hoff"

agent:
  machine:
    type: "e1-standard-2"
    os_image: "ubuntu1804"

# If we push a new build to some branch that isn't master, and another build is
# already running, we cancel it.
auto_cancel:
  running:
    when: "branch != 'master'"

blocks:
  - name: "Build"
    task:
      secrets:
        - name: "opsbot-github-key"
        # Keys needed to access our cachix cache.
        - name: "cachix-channable-public"

      jobs:
        - name: "Build, test, package, ship"
          commands:
            # For some reason, Semaphore CI sets this variable, but it causes the nix installation to fail
            - unset LD_LIBRARY_PATH
            # Change permissions of the shipping key to avoid SSH complaining
            # about the default file permissions that Semaphore uses.
            - "chmod 0600 ~/.ssh/id_ed25519"
            - "ssh-add ~/.ssh/id_ed25519"

            - "checkout"

            # Free space on the disk in order to save the nix store and error on build failures.
            - .semaphore/prologue.sh

            # Restore `/nix` cache. Create the directory first, otherwise we encounter
            # permission errors. We do this because the Semaphore cache is faster than
            # both Cachix and cache.nixos.org.
            - "sudo mkdir /nix"
            - "sudo chown -R semaphore:semaphore /nix"
            - "cache restore nix-store-"

            # Restore any stack cache that we can find.
            - "cache restore stack-cache-"

            # Install Nix and source the shell configuration immediately.
            - "./nix/install"
            - ". $HOME/.nix-profile/etc/profile.d/nix.sh"

            # Install Cachix and use the Channable cache
            - "nix-env -iA nixpkgs.cachix"
            - "cachix use channable-public"

            # Bring all the tools from the pinned build environment into the PATH.
            - "export PATH=$(nix-build --no-out-link default.nix)/bin:$PATH"

            # Binaries in the profile built above may need locales, that they
            # can't find unless we point LOCALE_ARCHIVE at the archive that
            # contains them.
            - "export LOCALE_ARCHIVE=$(nix-build --no-out-link locale.nix)/lib/locale/locale-archive"

            # The stack builds are currently broken, see https://github.com/channable/hoff/issues/106
            # - "stack setup"
            # - "stack --no-terminal build --split-objs"
            # - "stack --no-terminal test --split-objs"

            # Match the licenses of dependencies agains a whitelist, and fail
            # if anything is not whitelisted. Grep -v returns # 1 if nothing
            # matches, so we invert it with a ! prefix.  The "unexceptionalio"
            # library is tagged as "license other" on Hackage, but the license
            # appears to be ISC, so whitelist it too. See also [1].
            # Also, when getting the dependencies from Nixpkgs, `http-link-header` and
            # `monad-loops` show up as `<unknown>`. According to hackgage, they
            # are PublicDomain though. See also [2], [3].
            # [1]: https://hackage.haskell.org/package/unexceptionalio-0.3.0/src/COPYING.
            # [2]: https://hackage.haskell.org/package/monad-loops-0.4.3
            # [3]: https://hackage.haskell.org/package/http-link-header-1.2.0
            - "! stack ls dependencies --license | egrep -v 'Apache-2|BSD-?2|BSD-?3|MIT|ISC|PublicDomain|MPL-2.0|unexceptionalio|http-link-header|monad-loops'"

            # Check shell scripts for issues.
            - "shellcheck package/*.sh package/deb-postinst"

            # Print working directory for debugging purposes
            - "pwd"

            # Run build and tests in Nix
            # Because this is a public repository, and not everyone is using Nix,
            # we keep the stack setup around. The Nix build however is used in production.
            - "nix-build --no-out-link release.nix >nix-store-location"

            # Display Nix store location for debugging purposes
            - "cat nix-store-location"

            # push the result to Cachix.
            - "cat nix-store-location | cachix push channable-public"

            # Remove store location (uneeded now)
            - "rm nix-store-location"

            # Store a copy of the nix store. This will be refreshed daily, which
            # is more than sufficient for this repo.
            - "cache store nix-store-$(date -u -Idate) /nix"

            # Store the dependencies that Stack compiled for us.
            - "cache store stack-cache-$(checksum stack.yaml.lock)-$(checksum hoff.cabal) $HOME/.stack"
