#!/bin/bash
#
# Simulates a webhook from GitHub, only needed fields are included.
#
# Commenter, PR number and comment contents are taken from the command line.
# Owner and repository are taken as the first to appear in config.json.
# This avoids repetition when simulating GitHub hooks from the CLI.
#
# Example:
#
# ./tools/send-webhook deckard 137 "@hoffbot merge"

# prints an error message on stderr and exit
errxit() {
	echo "$0: $*" >&2
	exit 1
}

# Takes the first occurrence of a field in config.json
# while requiring it to be one-field-per-line.
# This is limited but should be enough for local testing.
get() {
	cat config.json |
	grep $1 |
	head -1 |
	sed 's/.* "//;s/".*//'
}

# Produced a comment payload with the fields needed by Hoff.
# Variables $owner, $repository, $number, $author and $body must be set.
# https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issue_comment
comment-payload() {
# TODO: change to cat after fixing #127 (see FIXME below).
tr -d '\n' <<JSON
{
	"action": "created",
	"repository": {
		"owner": {"login": "$owner"},
		"name": "$repository"
	},
	"issue": {"number": $number},
	"sender": {"login": "$author"},
	"comment": {"body": "$body"}
}
JSON
}

# Produced a build status payload with the fields needed by Hoff.
# Variables $owner, $repository and $commit
# https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#status
build-status-payload() {
# TODO: change to cat after fixing #127 (see FIXME below).
tr -d '\n' <<JSON
{
	"name": "$owner/$repository",
    "target_url": null,
	"repository": {
		"owner": {"login": "$owner"},
		"name": "$repository"
	},
	"state": "success",
    "sha": "$commit",
    "commit": {"sha": "$commit"}
}
JSON
}

# FIXME: In the above payload functions, tr is used to remove line breaks.
#        We seem to be relying on the fact that GitHub always
#        sends webhook payloads without newlines to perform
#        the signature checks.  If GitHub changes this at some
#        point in the future, Hoff will stop working.
#        See: https://github.com/channable/hoff/issues/127
#        After issue #127 is fixed, we can replace tr by cat.

secret=`get secret`
owner=`get owner`
repository=`get repository`

[ -n "$secret" ]     || errxit "could not parse secret from config.json"
[ -n "$owner"  ]     || errxit "could not parse owner from config.json"
[ -n "$repository" ] || errxit "could not parse repository from config.json"

case `basename $0` in
comment)
	author="$1"
	number="$2"
	shift 2
	body="$*"

	[ -n "$author" ] || errxit "Author should be provided as the 1st argument"
	[ -n "$number" ] || errxit "PR number should be provided as the 2st argument"

	event="issue_comment"
	comment-payload >webhook-data.json
	;;
build-status)
	event=
	commit="$1"

	[ -n "$commit" ] || errxit "Full commit sha should be provided as the 1st argument"
	status="$2" || status=success

	event="status"
	build-status-payload >webhook-data.json
	;;
*)
	errxit "please call this script as ./tools/comment or ./tools/build-status"
	;;
esac

# Regarding the choice of the webhook-data.json file,
# we could have used /tmp, but the current directory
# is better for debugging purposes.
# One can check the final payload after the fact.

signature1=`cat webhook-data.json | openssl dgst -sha1 -hmac "$secret" | sed 's/^.* //'`
signature256=`cat webhook-data.json | openssl dgst -sha256 -hmac "$secret" | sed 's/^.* //'`

curl \
	-XPOST \
	-w "\n\n%{http_code}\n" \
	-H "X-GitHub-Event: $event" \
	-H "X-Hub-Signature: sha1=$signature1" \
	-H "X-Hub-Signature-256: sha256=$signature256" \
	http://localhost:1979/hook/github \
	-d @webhook-data.json
